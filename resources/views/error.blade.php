<!DOCTYPE html>
<html lang="vi">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>L·ªói {{ $statusCode ?? 'Kh√¥ng x√°c ƒë·ªãnh' }} - H·ªá th·ªëng kh·∫£o s√°t</title>
    <meta name="description" content="ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n.">
    <meta name="keywords" content="error page, system error, {{ $statusCode ?? 'error' }}">
    <style>
        :root {
            @import url('https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,100..900;1,100..900&family=Prompt:wght@400;700&display=swap');
        }

        body {
            margin: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            background-color: #f8f9fa;
            color: #acbac3;
            font-family: "Prompt", sans-serif;
            font-weight: 400;
            font-style: normal;
        }

        .container {
            text-align: center;
        }

        #warning-icon {
            font-size: 80px;
        }

        #warning-number {
            font-size: 55px;
            color: #e99415;
        }

        #countdown {
            font-size: 30px;
            font-weight: bold;
            color: #e99415;
        }

        .error-message {
            margin: 20px 0;
            padding: 15px;
            background-color: #fff3cd;
            border: 1px solid #ffeaa7;
            border-radius: 5px;
            color: #856404;
        }

        h1 {
            font-size: 36px;
            margin: 20px 0;
        }

        p {
            font-size: 18px;
        }

        .back-button {
            display: inline-block;
            margin-top: 20px;
            padding: 10px 20px;
            background-color: #007bff;
            color: white;
            text-decoration: none;
            border-radius: 5px;
            transition: background-color 0.3s;
        }

        .back-button:hover {
            background-color: #0056b3;
            color: white;
            text-decoration: none;
        }
    </style>

<body>
    <div class="container">
        <h1 class="warning-title">
            <span id="warning-icon">
                @if(($statusCode ?? 500) >= 500)
                    üîß
                @elseif(($statusCode ?? 404) == 403)
                    üîí
                @elseif(($statusCode ?? 419) == 419)
                    ‚è∞
                @else
                    ‚ö†Ô∏è
                @endif
            </span>
            <span id="warning-number">
                {{ $statusCode ?? '500' }}
            </span>
            @php
                $currentStatusCode = $statusCode ?? 500;
                if (isset($exception)) {
                    if (method_exists($exception, 'getStatusCode')) {
                        $currentStatusCode = $exception->getStatusCode();
                    } elseif (method_exists($exception, 'getCode')) {
                        $currentStatusCode = $exception->getCode() ?: 500;
                    }
                }

                $messages = [
                    400 => 'Y√™u c·∫ßu kh√¥ng h·ª£p l·ªá',
                    401 => 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
                    403 => 'Truy c·∫≠p b·ªã t·ª´ ch·ªëi',
                    404 => 'Trang b·∫°n truy c·∫≠p kh√¥ng t·ªìn t·∫°i',
                    405 => 'Ph∆∞∆°ng th·ª©c kh√¥ng ƒë∆∞·ª£c ph√©p',
                    419 => 'Phi√™n l√†m vi·ªác ƒë√£ h·∫øt h·∫°n',
                    422 => 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá',
                    429 => 'Qu√° nhi·ªÅu y√™u c·∫ßu',
                    500 => 'L·ªói m√°y ch·ªß n·ªôi b·ªô',
                    502 => 'C·ªïng k·∫øt n·ªëi kh√¥ng h·ª£p l·ªá',
                    503 => 'D·ªãch v·ª• t·∫°m th·ªùi kh√¥ng kh·∫£ d·ª•ng',
                    504 => 'H·∫øt th·ªùi gian ch·ªù'
                ];
                $errorMessage = $message ?? ($messages[$currentStatusCode] ?? 'ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh');
            @endphp
            {{ $errorMessage }}
        </h1>

        @if($statusCode == 419)
            <div class="error-message">
                <strong>Phi√™n l√†m vi·ªác h·∫øt h·∫°n:</strong> Vui l√≤ng l√†m m·ªõi trang v√† th·ª≠ l·∫°i. ƒêi·ªÅu n√†y th∆∞·ªùng x·∫£y ra khi b·∫°n ·ªü
                tr√™n trang qu√° l√¢u.
                <br><br>
            </div>
        @elseif($statusCode >= 500)
            <div class="error-message">
                <strong>L·ªói m√°y ch·ªß:</strong> ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i sau.
            </div>
        @elseif($statusCode == 403)
            <div class="error-message">
                <strong>Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p:</strong> B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p v√†o trang n√†y.
            </div>
        @elseif($statusCode == 404)
            <div class="error-message">
                <strong>Kh√¥ng t√¨m th·∫•y:</strong> Trang b·∫°n ƒëang t√¨m ki·∫øm kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ b·ªã di chuy·ªÉn.
            </div>
        @else
            <div class="error-message">
                <strong>L·ªói:</strong> {{ $message }}
            </div>
        @endif

        <p class="warning-message">B·∫°n s·∫Ω ƒë∆∞·ª£c chuy·ªÉn v·ªÅ trang ch·ªß sau <span id="countdown">5</span> gi√¢y...</p>

        <a href="{{ url('/') }}" class="back-button">V·ªÅ trang ch·ªß ngay</a>
    </div>
    <script>
        // Countdown timer
        let countdown = 5;
        const countdownElement = document.getElementById('countdown');

        // Ki·ªÉm tra n·∫øu l√† l·ªói 419 v√† Safari iOS
        const statusCode = {{ $statusCode ?? 500 }};
        const isIosSafari = /iPhone|iPad|iPod/i.test(navigator.userAgent) && /Safari/i.test(navigator.userAgent);

        if (statusCode === 419 && isIosSafari) {
            // ƒê·ªëi v·ªõi Safari iOS v√† l·ªói 419, th·ª≠ l√†m m·ªõi token tr∆∞·ªõc
            tryRefreshToken();
        } else {
            // B√¨nh th∆∞·ªùng countdown
            startCountdown();
        }

        function tryRefreshToken() {
            // Th·ª≠ refresh CSRF token
            fetch('/refresh-csrf-token', {
                method: 'GET',
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
                .then(response => response.json())
                .then(data => {
                    if (data.csrf_token) {
                        // C·∫≠p nh·∫≠t meta tag
                        const metaTag = document.querySelector('meta[name="csrf-token"]');
                        if (metaTag) {
                            metaTag.setAttribute('content', data.csrf_token);
                        }

                        // Th·ª≠ reload trang
                        setTimeout(() => {
                            window.location.reload();
                        }, 1000);
                    } else {
                        startCountdown();
                    }
                })
                .catch(() => {
                    startCountdown();
                });
        }

        function startCountdown() {
            const interval = setInterval(() => {
                countdown--;
                if (countdown <= 0) {
                    clearInterval(interval);
                    window.location.href = '/';
                }
                countdownElement.textContent = countdown;
            }, 1000);
        }
    </script>
</body>

</html>